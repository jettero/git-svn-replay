#!/usr/bin/perl
# vi:tw=0:
# $Id: git_replay 78.1717.P4v4OnzjdJ0xR7S/fWA3brInrAU 2007-06-11 09:46:16 -0400 $

use strict;
use DBI;
use DBM::Deep;
use Term::GentooFunctions qw(:all);

die "$0 gitrepo svnco replaydb" unless @ARGV == 3;

my $gitrepo = shift @ARGV;
my $svnco   = shift @ARGV;
my $dbfile  = shift @ARGV;

my $dbm = new DBM::Deep($dbfile);

&setup;
&run;

# setup {{{
sub setup {
    if( not -d "$svnco/.git/" ) {
        local $ENV{GIT_DIR} = "$svnco/.git";

        ebegin "cloning $gitrepo";
        system(qw(git clone --bare), $gitrepo, $ENV{GIT_DIR}) == 0 or die;
        system(qw(cg branch-add origin), $gitrepo) == 0 or die; # needs the GIT_DIR
        # NOTE: we are not *in* the git dir, so don't do anything that assumes we're cd'd in there
        # eg:
        # system(qw(cg seek master)) == 0 or die;
        # system(qw(cg reset)) == 0 or die;
        eend 1;
    }

    chdir $svnco or die "couldn't chdir into svnco($svnco): $!";
    ebegin "pulling updates from $gitrepo";
    system(qw(cg update)) == 0 or die;
    eend 1;
}
# }}}
# run {{{
sub run {
    open my $in, "git rev-list --all --parents | tac |" or die "error with revlist popen(): $!";
    while(<$in>) {
        my ($commit, $parent) = split /\s+/;

        next if $dbm->{already_replayed}{$commit};

        $dbm->{already_replayed}{$commit} = 1 if
        &replay($commit, $parent) and &inform_svn;
    }
    close $in;
}
# }}}

# replay {{{
sub replay {
    my ($commit, $parent) = @_;

    unless( our $here ) {
        $here ++;
        system(qw(cg seek master)) == 0 or die;
        system(qw(cg reset)) == 0 or die;
    }

    ebegin "replaying $commit";
    system(qw(cg seek), $commit) == 0 or die;
    eend 1;

    return 0;
}
# }}}
# inform_svn {{{
sub inform_svn {
    return 0;
}
# }}}
